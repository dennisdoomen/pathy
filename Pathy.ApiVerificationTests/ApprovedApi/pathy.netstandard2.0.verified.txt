[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("Pathy.Specs")]
namespace Pathy
{
    public readonly struct ChainablePath : System.IEquatable<Pathy.ChainablePath>
    {
        public Pathy.ChainablePath Directory { get; }
        public bool DirectoryExists { get; }
        public string DirectoryName { get; }
        public bool Exists { get; }
        public string Extension { get; }
        public bool FileExists { get; }
        public bool IsDirectory { get; }
        public bool IsFile { get; }
        public bool IsNull { get; }
        public bool IsRooted { get; }
        public string Name { get; }
        public Pathy.ChainablePath Parent { get; }
        public Pathy.ChainablePath Root { get; }
        public static Pathy.ChainablePath Current { get; }
        public static Pathy.ChainablePath Empty { get; }
        public static Pathy.ChainablePath New { get; }
        public static Pathy.ChainablePath Null { get; }
        public static Pathy.ChainablePath Temp { get; }
        public Pathy.ChainablePath FindParentWithFileMatching(params string[] wildcards) { }
        public bool HasExtension(string extension) { }
        public bool HasName(string name) { }
        public Pathy.ChainablePath ToAbsolute() { }
        public object ToAbsolute(Pathy.ChainablePath parentPath) { }
        public System.IO.DirectoryInfo ToDirectoryInfo() { }
        public System.IO.FileInfo ToFileInfo() { }
        public override string ToString() { }
        public static Pathy.ChainablePath FindFirst(params Pathy.ChainablePath[] paths) { }
        public static Pathy.ChainablePath FindFirst(params string[] paths) { }
        public static Pathy.ChainablePath From(string path) { }
        public static string op_Implicit(Pathy.ChainablePath chainablePath) { }
        public static Pathy.ChainablePath op_Implicit(string path) { }
        public static Pathy.ChainablePath operator +(Pathy.ChainablePath leftPath, string additionalPath) { }
        public static Pathy.ChainablePath operator /(Pathy.ChainablePath leftPath, string subPath) { }
        public static Pathy.ChainablePath operator /(Pathy.ChainablePath? leftPath, string subPath) { }
    }
    public static class ChainablePathExtensions
    {
        public static void CreateDirectoryRecursively(this Pathy.ChainablePath path) { }
        public static void DeleteFileOrDirectory(this Pathy.ChainablePath path) { }
        public static void MoveFileOrDirectory(this Pathy.ChainablePath sourcePath, Pathy.ChainablePath destinationDirectory, string newName = null) { }
    }
    public static class StringExtensions
    {
        public static Pathy.ChainablePath ToPath(this string path) { }
    }
}